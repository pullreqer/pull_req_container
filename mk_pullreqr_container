#!/bin/bash -x
set -o errexit errtrace
# Doesn't work yet, microdnf doesn't support keepcache=1
#FROM="fedora-minimal:32"
#DNF=microdnf

FROM="fedora:32"
DNF=dnf
podman pull registry.fedoraproject.org/${FROM}
build_packages="make openssl-devel \
	  dh-autoreconf curl-devel expat-devel gettext-devel openssl-devel perl-devel \
	  zlib-devel libtalloc-devel libarchive-devel"
run_packages="openssh openssh-server"
script_path="$(dirname $(realpath $0))"
run_path="$(pwd)"
export GIT_USER="git"
export FROM DNF build_packages run_packages script_path run_path

mkdir -p ${run_path}/persistent/{vol,env,keys}
mkdir -p ${run_path}/persistent/vol/{home,var-git}
mkdir -p ${run_path}/persistent/vol/etc-ssh
mkdir -p ${run_path}/cache/{cargo,rustup,dnf,git}
mkdir -p ${run_path}/build/{artifacts,gen_code,logs}

if [ ! -d cache/git/git ]; then
  pushd . && cd cache/git && git clone --depth 1 "https://github.com/git/git.git" && popd;
fi

if [ ! -d cache/git/pullreqr_githook ]; then
  pushd . && cd cache/git && git clone --depth 1 "https://github.com/pullreqr/pullreqr_githook.git" && popd;
fi

if [ ! -d cache/git/pullreqr_ssh_info ]; then
  pushd . && cd cache/git && git clone --depth 1 "https://github.com/pullreqr/pullreqr_ssh_info.git" && popd;
fi

pushd . && cd cache/git/git && git pull --depth 1 --all && popd
pushd . && cd cache/git/pullreqr_githook && git pull --all && popd

cat <<-'EOF' | envsubst '${script_path} ${run_path}' >${run_path}/build/gen_code/git.sh
	#!/bin/bash -x
	set -o errexit errtrace

	# Some paths...
	run_path="${run_path}"
	artifacts="${run_path}/build/artifacts/:/tmp:Z"
	cargo="${run_path}/cache/cargo/:/root/.cargo:Z"
	rustup="${run_path}/cache/rustup/:/root/.rustup:Z"
	cargo_target="${run_path}/cache/cargo_target:/root/cargo_target:Z"
	GIT_GIT="${run_path}/cache/git/git"
	HOOKS_GIT="${run_path}/cache/git/pullreqr_githook/"
	SSH_INFO_GIT="${run_path}/cache/git/pullreqr_ssh_info/"
	
	make_build_env_container() {
		dnf_cache="${run_path}/cache/dnf:/var/cache/dnf:Z"
		buildah config --label maintainer="$USER" ${build_env_container}
		buildah run -v "${dnf_cache}" ${build_env_container} ${DNF} install --setopt=install_weak_deps=0 --setopt keepcache=1 -y ${build_packages}

		# Cargo env vars sourcing
		buildah run ${build_env_container} sh -c 'echo "if [ -f $HOME/.cargo/env ]; then . $HOME/.cargo/env; fi" >> /etc/bashrc'
		buildah run ${build_env_container} sh -c 'echo "if [ -d $HOME/cargo_target ]; then CARGO_TARGET_DIR=$HOME/cargo_target; export CARGO_TARGET_DIR; fi" >> /etc/bashrc'

		buildah commit ${build_env_container} git-build_env
	}

	if [ ! -f ${run_path}/persistent/env/build_env.env ]; then
		container_name="build_env" container_id="$(buildah from ${FROM})" envsubst <${script_path}/container.template >${run_path}/persistent/env/build_env.env
		. ${run_path}/persistent/env/build_env.env
		error_handler() {
			code=$?
			buildah umount ${build_env_container}
			buildah delete ${build_env_container}
			echo "Removing build_env.env"
			rm ${run_path}/persistent/env/build_env.env
			exit $code
		}
		trap 'error_handler' ERR SIGINT
		make_build_env_container | tee ${run_path}/build/logs/build_env-build.log
	else
		. ${run_path}/persistent/env/build_env.env
	fi


	make_build_container() {

		pushd .
			cd ${build_mountpoint}
	
			if [ ! -d ${build_mountpoint}/git ]; then
				git clone --depth 1 ${GIT_GIT}
			else
				pushd .
				cd ${build_mountpoint}/git
				git pull --depth 1
				popd
			fi
			buildah config --workingdir git ${build_container}
			buildah run ${build_container} autoreconf
			buildah run ${build_container} ./configure --prefix="/usr"
			buildah run ${build_container} make -j $(lscpu | grep '^CPU(s):' | cut -d' ' -f2- | tr -d "[:blank:]")
			buildah run -v "${artifacts}" ${build_container} make DESTDIR=/tmp/destdir install
			buildah run -v "${artifacts}" ${build_container} cp t/helper/test-tool /tmp/destdir/usr/bin/

			# Cargo env vars.
			buildah run ${build_container} sh -c 'echo "if [ -f $HOME/.cargo/env ]; then . $HOME/.cargo/env; fi" >> /etc/bashrc'
			buildah run ${build_container} sh -c 'echo "if [ -d $HOME/cargo_target ]; then CARGO_TARGET_DIR=$HOME/cargo_target; export CARGO_TARGET_DIR; fi" >> /etc/bashrc'

			# Cargo
			buildah run -v ${rustup} -v ${cargo} ${build_container} sh -l -c 'if [ -x "$(command -v rustup)" ]; then rustup self update; rustup update; else curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- "-y" "--profile" "minimal" "--no-modify-path"; fi'
			
			if [ ! -d ${build_mountpoint}/pullreqr_githook ]; then
				git clone --depth 1 ${HOOKS_GIT}
			else
				pushd .
				cd ${build_mountpoint}/pullreqr_githook
				git pull
			fi
			buildah run -v "${artifacts}" -v "${rustup}" -v "${cargo}" ${build_container} sh -l -c 'cargo install --path /pullreqr_githook --root /tmp/destdir/usr/'

			if [ ! -d ${build_mountpoint}/pullreqr_ssh_info ]; then
				git clone --depth 1 ${SSH_INFO_GIT}
			else
				pushd .
				cd ${build_mountpoint}/pullreqr_ssh_info
				git pull
			fi
			buildah run -v "${artifacts}" -v "${rustup}" -v "${cargo}" ${build_container} sh -l -c 'cargo install --path /pullreqr_ssh_info --root /tmp/destdir/usr/'

			# Build tar file from destdir 
			buildah config --workingdir /tmp/destdir ${build_container}
			buildah run -v "${artifacts}" ${build_container} tar czvf /tmp/destdir.tar.gz ./
			
		popd
		buildah commit ${build_container} git-build
	}

	if [ ! -f ${run_path}/persistent/env/build.env ]; then
		container_name="build" container_id=$(buildah from localhost/git-build_env) envsubst <${script_path}/container.template >${run_path}/persistent/env/build.env
		. ${run_path}/persistent/env/build.env
		error_handler() {
			code=$?
			buildah umount ${build_container}
			buildah delete ${build_container}
			echo "Removing build.env"
			rm ${run_path}/persistent/env/build.env
			exit $code
		}
		trap 'error_handler' ERR SIGINT
		make_build_container | tee ${run_path}/build/logs/build-build.log
	else
		. ${run_path}/persistent/env/build.env
	fi

	make_run_container() {
		dnf_cache="${run_path}/cache/dnf:/var/cache/dnf:Z"
		buildah run -v "${run_path}/persistent/vol/etc-ssh:/etc/ssh:Z" \
			    -v "${dnf_cache}" ${ctr30} \
			    ${run_container} ${DNF} install \
				--setopt=install_weak_deps=0 \
				--setopt keepcache=1 \
				-y ${run_packages}
		buildah run ${run_container} systemctl enable sshd.service
		buildah run -v "${run_path}/persistent/vol/etc-ssh:/etc/ssh:Z" ${run_container} sh -c 'echo "PubkeyAuthentication yes" >/etc/ssh/sshd_config.d/pubkey_auth.conf'
		tar xvf build/artifacts/destdir.tar.gz -C ${run_mountpoint}
		buildah run -v "${run_path}/persistent/vol/home:/home:Z" \
		   $run_container adduser \
		   --create-home \
		   --user-group \
		   --shell /usr/bin/git-shell \
		   --system \
		   --home-dir /home/${GIT_USER} \
		   ${GIT_USER}
		cp -a ${script_path}/git-shell-commands ${run_path}/persistent/vol/home/${GIT_USER}
		# This is primarily debugging junk for the proc-receive hook, should probably get rid of it.
		mkdir -p git-shell-commands ${run_path}/persistent/vol/home/${GIT_USER}/logs
		buildah run ${run_container} sh -c 'echo "if [ -d "$HOME/git-shell-commands" ]; then export PATH=\"$HOME/git-shell-commands:$PATH\"; fi" >> /etc/bashrc'
		username="${GIT_USER}" uid=$(buildah run $run_container id -u ${GIT_USER}) gid=$(buildah run $run_container id -g $GIT_USER) envsubst <${script_path}/user.template >${run_path}/persistent/env/git_user.env
		. ${run_path}/persistent/env/git_user.env

		# It probably deserves mention:
		# 	1. keygen on local machine, outside of a bind-mount volume
		# 	2. copy *public* key into a bind-mounted volume.
		# This is to ensure that the private key can't leak, only the public key.
		# and the public key only leaks if something copies the public key outside of the bind-mount volume
		# into the image layer itself.
		#
		mkdir -p ${run_path}/persistent/vol/home/$GIT_USER/.ssh
		if [ ! -f "${run_path}/persistent/keys/user_key.pub" ]; then 
		   ssh-keygen -t ecdsa -f ${run_path}/persistent/keys/user_key -q -N "" 
		fi
		cp ${run_path}/persistent/keys/user_key.pub ${run_path}/persistent/vol/home/$GIT_USER/.ssh/authorized_keys
		
cat <<-EOF2 >build/gen_code/git-permissions.sh
		#!/bin/bash -x
		chown $GIT_USER:$GIT_USER /home/$GIT_USER -R
		chmod 755 /home/$GIT_USER/.ssh
		chmod 655 /home/$GIT_USER/.ssh/authorized_keys
EOF2

cat <<-EOF2 >build/gen_code/git-permissions.service
		[Unit]
		Before=console-login-helper-messages-issuegen.service
		After=home.mount
		ConditionPathExists=!/var/lib/git-permissions

		[Service]
		Type=oneshot
		ExecStart=/usr/local/bin/git-permissions.sh
		ExecStartPost=/usr/bin/touch /var/lib/fixed-permissions
		RemainAfterExit=yes

		[Install]
		WantedBy=sshd.service
EOF2

		cp ${run_path}/build/gen_code/git-permissions.sh ${run_mountpoint}/usr/local/bin
		chmod +x ${run_mountpoint}/usr/local/bin/git-permissions.sh
		cp ${run_path}/build/gen_code/git-permissions.service ${run_mountpoint}/etc/systemd/system
		buildah run $run_container systemctl enable git-permissions.service
	}

	if [ ! -f ${run_path}/persistent/env/run.env ]; then
		container_name="run" container_id=$(buildah from ${FROM}) envsubst <${script_path}/container.template >${run_path}/persistent/env/run.env
		. ${run_path}/persistent/env/run.env
		error_handler() {
			code=$?
			buildah umount ${run_container}
			buildah delete ${run_container}
			echo "Removing run.env"
			rm ${run_path}/persistent/env/run.env
			exit $code
		}
		trap 'error_handler' ERR SIGINT
		make_run_container | tee ${run_path}/build/logs/run-build.log
	else
		. ${run_path}/persistent/env/run.env
	fi

	setup() {
		buildah config --entrypoint /usr/sbin/init ${run_container}
		buildah commit ${run_container} git-run
	}
	error_handler() {
			code=$?
			exit $code
	}
	trap 'error_handler' ERR
	setup
EOF

chmod +x build/gen_code/git.sh
buildah unshare build/gen_code/git.sh
# It's important that this is run_path (not some other directory).
# we're running under buildah unshare
. persistent/env/git_user.env
cat <<-'EOF' | envsubst '${git_uid} ${git_gid} ${GIT_USER} ${run_path}' >build/gen_code/git_start.sh
#!/bin/bash -x
cat <<-'EOF2' | podman unshare
	set -o errexit errtrace
	chown ${git_uid}:${git_gid} ${run_path}/persistent/vol/{home,var-git}
	chmod 700 ${run_path}/persistent/vol/home/${GIT_USER}/
	chmod 755 ${run_path}/persistent/vol/home/${GIT_USER}/.ssh
	chmod 655 ${run_path}/persistent/vol/home/${GIT_USER}/.ssh/authorized_keys
	chown 0:0 ${run_path}/persistent/vol/etc-ssh/ -R
	chmod 700 ${run_path}/persistent/vol/etc-ssh/
	chmod 600 ${run_path}/persistent/vol/etc-ssh/*
	podman run --rm --name pullreqr -v "${run_path}/persistent/vol/home:/home:Z" \
		   -v "${run_path}/persistent/vol/etc-ssh:/etc/ssh:Z" \
			-p 2222:22 -t --systemd=always localhost/git-run
EOF2
EOF
cat <<-'EOF' | envsubst '${git_uid} ${git_gid} ${run_path}' >build/gen_code/git_stop.sh
#!/bin/bash -x
cat <<-'EOF2' | podman unshare
	set -o errexit errtrace
	chown 0:0 ${run_path}/persistent/vol/ -R
	podman stop pullreqr
EOF2
EOF

cat <<'EOF' | envsubst '${PWD}' >build/gen_code/pullreqr.service
[Unit]
Description=Pull Reqr git server container
[Service]
Restart=always
ExecStart=${PWD}/build/gen_code/git_start.sh
ExecStop=${PWD}/build/gen_code/git_stop.sh

[Install]
WantedBy=multi-user.target
EOF

chmod +x build/gen_code/git_{start,stop}.sh
